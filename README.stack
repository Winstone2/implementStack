# implementStack
To implement a Stack data structure in JavaScript, we can use an array as the underlying data storage and implement the push, pop, and peek methods accordingly. A stack follows the Last-In-First-Out (LIFO) principle, meaning that the last element added to the stack is the first one to be removed.
Thought Process:

    We define a Stack class with a constructor that initializes an empty array this.stack to hold the elements of the stack.

    The push method allows us to add elements to the top of the stack using the push method of the array.

    The pop method removes and returns the top element from the stack using the pop method of the array. If the stack is empty, it returns undefined.

    The peek method returns the top element of the stack (last added) without removing it. If the stack is empty, it returns undefined.

    The isEmpty method checks if the stack is empty by checking the length of the array.

    The size method returns the number of elements currently in the stack.

Edge Cases to Consider:

    Pop or Peek on an Empty Stack: If the pop or peek method is called on an empty stack, they should return undefined to indicate that there are no elements to pop or peek.
    In this example, we create a Stack instance called myStack and add three elements to it using the push method. We then use the peek method to see the top element in the stack, the pop method to remove the top element, and the size method to get the current size of the stack.
